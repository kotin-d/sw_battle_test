Посмотрев на разные виды юнитов, видим что они обладают свойствами и действиями.
При этом, свойства могут сильно отличатся от юнита к юнита.  Поэтому свойства реализуем в виде стратегий.
Действия же, выстраиваются в цепочку для каждого юнита, выполняется только одно действие в цепочке. Действия могут влиять не только на свой юнит, но и на другие.
Как более сложный объект, действия так же могут обладать стратегиями.

Стратегии свойства.

Healther
Это стратегия, которая отвечает за здоровье юнита, и за ее смерть.  Видим, что у мины она другая. У нее нет жизней, ведет себя по другому.

Path
Стратегия расчета пути и положения юнита. Принадлежит все же юниту, а действие движения обращается к нему за данными.

UnDetector
Стратегия ненаходимиости конкретным Finder, довольно сложная для понимания вещь, поэтому на примере.  Есть мина, она не находиться ни ближнем поиском, не дальним
И есть ворон, которого можно найти только дальним поиском, к тому же с рядом ограничений (уменьшение расстояния поиска)
По большому счету у нас есть таблица Finder-Undetector. Такие таблицы реализуются с помощью двойной диспечерезации.  Но наша таблица очень вырожденная, поэтому полноценный
двойной диспечер нам не нужен. Наверно, это самое сложное место для понимания в системе.

Любая стратегия свойств может поменяться в любой момент.  Для удобства формируем им в конструкторе конкретного юнита.


Действия
Сейчас у нас есть два основных действия, атака и движение.  Каждый юнит обладаем своей цепочкой действий, которые будут выполняться в порядке который им задан.
При этом, атаки могут быть разными, отличающиеся в детялях.

Каждая атака определяется двумя стратегиями.

Finder
Стратегия поиска врага.  На каком расстоянии искать, найдем ли мы этого врага для данного finder (за это отвечает противоположная стратегия - UnDetection

Damager
Стратегия нанесения урона. У целителя одна другая, он не отнимает, а прибавляет здоровье.

Selector
Это не выделенная стратегия.  Для нее есть только заготовка.  Отвечает за выбор цели атаки из пригодных для атаки.  Сейчас выбирается случайная цель, но возможно развитие



После из стратегий мы собираем юнитов и их цепочку действий
Например, Воин имеет стратегию пути, скрытности, здоровья и имеет цепочку действий из ближней атаки и движения.

Охотник будет отличаться более длинной цепочкой действий.  Ближняя атака-дальняя атака-движение.


Для башни у нас поменяется стратегия выбора пути, на стоячую. А так же в цепочки действий не будет передвижения.
Комбинируя в юните разные стратегии, и цепочки действий мы довольно просто можем создавать разные виды юнитов. При этом иерархии стратегий и действий легко дополняются и разширяются.


Game - это класс игры, где и крутиться вся симуляция.
Game владеет картой, которая состоит из клеток и моделью данных игры.  Это сделано с расчетом на то, что проект как будто будет дальше развиваться. В таком случае использовать клетки будет намного удобнее.
Хотя, в существующем варианте можно было обойтись без них.  Просто в Finder перебирать все юниты на карте,  и считать для них расстояния до атакующего.

События которые мы логируем крайне важны.  И в реальном проекте вместо логов будет графики или что-то реальное и большое.  Что именно мы сейчас не знаем, но заранее подготовили делегаты,
к котором можно будет прикреплять необходимые действия.  Сейчас это просто делегаты, которые вызывают логирование.